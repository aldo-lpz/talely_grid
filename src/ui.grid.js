// Generated by CoffeeScript 1.6.3
$.widget("talely.grid", {
  options: {
    headers: [],
    columns: [],
    list: [],
    sortable: true,
    cell_changed: null,
    row_removed: null,
    row_added: null,
    list_reordered: null,
    object_clicked: null,
    goto_clicked: null
  },
  _create: function() {
    var ref,
      _this = this;
    ref = this;
    this._table = $(document.createElement('table'));
    this._table.addClass("talely-grid");
    this._header = $(document.createElement('thead'));
    this._header.addClass("talely-grid-header ui-widget-header");
    this._content = $(document.createElement('tbody'));
    this._content.addClass("talely-grid-content");
    this._create_headers();
    this._create_content();
    this._table.append(this._header);
    this._table.append(this._content);
    if (this.options.sortable) {
      this._content.sortable({
        handle: ".fa-bars",
        update: function(event, ui) {
          ref.options.list = ref._reorder_array();
          ref._trigger("list_reordered", null, {
            new_list: ref.options.list
          });
          return event.stopPropagation();
        }
      });
    }
    this.element.append(this._table);
  },
  _setOption: function(key, value) {
    this._super(key, value);
    switch (key) {
      case "headers":
        return this._create_headers();
      case "list":
        return this._create_content();
      case "columns":
        return this._create_content();
    }
  },
  _reorder_array: function() {
    var new_order, ref;
    ref = this;
    new_order = [];
    this._content.find("tr").each(function(i, row) {
      var old;
      row = $(row);
      old = row.attr("tg-row-index");
      new_order.push(ref.options.list[old]);
      row.attr("tg-row-index", i);
      return $('td', row).each(function(j, col) {
        return $(col).attr("tg-row-index", i);
      });
    });
    return new_order;
  },
  _create_content: function() {
    var i, row, _i, _len, _ref, _results;
    this._content.empty();
    _ref = this.options.list;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      row = _ref[i];
      _results.push(this._content.append(this._create_row(row, i)));
    }
    return _results;
  },
  _create_headers: function() {
    var title, titles, _i, _len, _ref;
    this._header.empty();
    titles = [];
    titles.push("<tr>");
    _ref = this.options.headers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      title = _ref[_i];
      if (title === "") {
        titles.push("<th class='talely-grid-title'>&nbsp;</th>");
      } else {
        titles.push("<th class='talely-grid-title'>" + title + "</th>");
      }
    }
    titles.push("</tr>");
    return this._header.html(titles.join(""));
  },
  _create_row: function(row_obj, index) {
    var column, r, _i, _len, _ref;
    r = $("<tr></tr>").addClass("talely-grid-row").attr("tg-row-index", index);
    _ref = this.options.columns;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      column = _ref[_i];
      r.append(this._create_column(column, row_obj, index));
    }
    return r;
  },
  _create_column: function(col, row, index) {
    var c;
    c = $("<td></td>").addClass("talely-grid-col").attr("tg-col-name", col.name).attr("tg-row-index", index);
    switch (col.type) {
      case "reorder":
        c.append("<i class='fa fa-bars'></i>");
        break;
      case "input":
        c.append(this._add_input_column(index, col.name, row[col.name]));
        break;
      case "checkbox":
        c.append(this._add_checkbox_column(index, col.name, row[col.name]));
        c.css("text-align", "center");
        break;
      case "select":
        c.append(this._add_select_column(index, col.name, row[col.name]));
        break;
      case "goto":
        c.append(this._add_goto_column(index));
        break;
      case "object":
        c.append(this._add_object_column(index, col.name));
        c.css("text-align", "center");
        break;
      case "delete":
        c.append(this._add_delete_column(index));
        break;
      default:
        c.append(row[col.name]);
    }
    return c;
  },
  _add_input_column: function(index, name, value) {
    var input, ref;
    ref = this;
    input = $(document.createElement('input'));
    input.attr("type", "text");
    input.attr("value", value);
    input.bind("textchange", function(event) {
      ref.options.list[index][name] = $(this).val();
      ref._trigger("cell_changed", null, {
        value: $(this).val(),
        cell: name,
        row: index
      });
      return event.stopPropagation();
    });
    return input;
  },
  _add_checkbox_column: function(index, name, value) {
    var check, ref;
    ref = this;
    check = $(document.createElement('input'));
    check.attr("type", "checkbox");
    if (value) {
      check.prop("checked", true);
    } else {
      check.prop("checked", false);
    }
    check.bind("change", function(event) {
      var v;
      v = $(this).is(":checked") ? true : false;
      ref.options.list[index][name] = v;
      ref._trigger("cell_changed", null, {
        value: v,
        cell: name,
        row: index
      });
      return event.stopPropagation();
    });
    return check;
  },
  _add_delete_column: function(index) {
    var icon, ref;
    ref = this;
    icon = $("<i></i>").addClass("fa fa-trash-o");
    icon.bind("click", function(event) {
      if (confirm("Delete?")) {
        ref.options.list.splice(index, 1);
        $("tr[tg-row-index=" + index + "]", ref.element).remove();
        ref.options.list = ref._reorder_array();
        ref._trigger("row_removed", null, {
          row: index
        });
      }
      return event.stopPropagation();
    });
    return icon;
  },
  _add_select_column: function(index, name, list) {
    var item, ref, select, _i, _len;
    ref = this;
    select = $(document.createElement('select'));
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      item = list[_i];
      select.append("<option value='" + item + "' >" + item + "</option>");
    }
    select.bind("change", function(event) {
      var selected;
      selected = $(this).val();
      ref.options.list[index][name] = selected;
      ref._trigger("cell_changed", null, {
        value: selected,
        cell: name,
        row: index
      });
      return event.stopPropagation();
    });
    return select;
  },
  _add_goto_column: function(index) {
    var icon, ref;
    ref = this;
    icon = $("<i></i>").addClass("fa fa-search");
    icon.bind("click", function(event) {
      ref._trigger("goto_clicked", null, {
        row: ref.options.list[index]
      });
      return event.stopPropagation();
    });
    return icon;
  },
  _add_object_column: function(index, name) {
    var icon, ref;
    ref = this;
    icon = $("<i></i>").addClass("fa fa-plus");
    icon.bind("click", function(event) {
      ref._trigger("object_clicked", null, {
        obj: ref.options.list[index][name],
        index: index,
        name: name
      });
      return event.stopPropagation();
    });
    return icon;
  },
  add_row: function(obj) {
    var i;
    i = this.options.list.length;
    this.options.list.push(obj);
    this._content.append(this._create_row(obj, i));
    return this._trigger("row_added", null, {
      row: i,
      obj: obj
    });
  }
});
